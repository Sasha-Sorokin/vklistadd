import { createStyles, SimpleStyleRules } from "simplestyle-js";
import { Properties } from "csstype";
import { addUnique, isArray } from "./arrays";
import { getWindow } from "./window";
import { ready } from "./ready";

let head: HTMLHeadElement | null = null;

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HEAD —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 *
 * @return HEAD —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
function getHead() {
	if (head == null) {
		head = getWindow().document.head;
	}

	return head;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç STYLE —ç–ª–µ–º–µ–Ω—Ç –≤ –≥–æ–ª–æ–≤–Ω–æ–π (HEAD) —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 *
 * @param stylesheet –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∏–ª–µ–π, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ STYLE —ç–ª–µ–º–µ–Ω—Ç–∞
 */
function appendStyle(stylesheet: string) {
	const style = document.createElement("style");
	style.innerHTML = stylesheet;

	ready(() => getHead().appendChild(style));
}

/**
 * –ù–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ —Å—Ç–∏–ª—è–º–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç CSS, –≤–æ–∑–≤—Ä–∞—â–∞—è –æ–±—ä–µ–∫—Ç
 * —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–ª–∞—Å—Å–æ–≤
 *
 * –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π alias, —á—Ç–æ–±—ã –Ω–µ –º—É—á–∏—Ç—å—Å—è —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤.
 * –í—Å—é —Ä–∞–±–æ—Ç—É —Å–æ —Å—Ç–∏–ª—è–º–∏ –ø—Ä–æ–¥–µ–ª—ã–≤–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ `simplestyle-js`
 *
 * @param styles –ö–∞—Ä—Ç–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
 * —Å—Ç–∏–ª–µ–π –≤ –í–µ—Ä–±–ª—é–∂–µ–π–ù–æ—Ç–∞—Ü–∏–∏
 * @return –ö–∞—Ä—Ç—É, –≥–¥–µ —É–∂–µ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç–∏–ª–µ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏—Ö –∫–ª–∞—Å—Å—ã –¥–ª—è
 * –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */
export function style<S extends SimpleStyleRules>(styles: S) {
	const { classes, stylesheet } = createStyles(styles, {});
	// –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤—Ä—É—á–Ω—É—é —Ç–æ–ª—å–∫–æ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	appendStyle(stylesheet);
	return classes;
}

/**
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –∫–ª–∞—Å—Å–∞
 */
type Prop = string | number | symbol;

/**
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –∫–ª–∞—Å—Å–æ–≤
 */
type ClassNamesToggles<ClassNames extends Prop> = {
	[Classname in ClassNames]: boolean;
};

/**
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ readonly –º–∞—Å—Å–∏–≤ –∏–∑ –Ω–∏—Ö
 */
type Droplet<ClassNames extends Prop> = ClassNames | readonly ClassNames[];

/**
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –µ–¥–∏–Ω–∏—á–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ `c`
 */
type Drop<ClassNames extends Prop> =
	| ClassNamesToggles<ClassNames>
	| Droplet<ClassNames>
	| boolean
	| undefined
	| null;

/**
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π readonly –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ `c`
 */
type DropArgs<ClassNames extends Prop = Prop> = readonly Drop<ClassNames>[];

/**
 * Combine. –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
 *
 * @param names –ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –∫–ª–∞—Å—Å–∞–º–∏, –ª–∏–±–æ —É—Å–ª–æ–≤–∏–µ
 * @return –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
 * @example
 * // –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
 * c("post", "own", post.author.id === currentUser.id); // => "post own"
 * //
 * // –û–±—ä–µ–∫—Ç—ã:
 * c("post", {
 * 	own: post.author.id === currentUser.id, // –¥–æ–ø—É—Å—Ç–∏–º false
 * 	postponed: post.publishAt != null, // –¥–æ–ø—É—Å—Ç–∏–º true
 * }); // => "post postponed"
 * //
 * // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è:
 * c("post", "is-draft", true, false); // => "post is-draft"
 * //
 * // –ú–∞–≥–∏—è –º–∞—Å—Å–∏–≤–æ–≤:
 * c("post", ["no-pointer", "opacity-6"], isHidden);
 * // (isHidden = true ) => "post no-pointer opacity-6"
 * // (         = false) => "post"
 */
export function c<ClassNames extends Prop>(
	...names: DropArgs<ClassNames>
): string {
	const classNames: ClassNames[] = [];

	let prevDroplet: Droplet<ClassNames> | null = null;

	const addDroplet = (replaceDroplet: Droplet<ClassNames> | null) => {
		const droplet = prevDroplet;

		prevDroplet = replaceDroplet ?? null;

		if (droplet == null) return;

		if (Array.isArray(droplet)) {
			addUnique(classNames, ...droplet);

			return;
		}

		addUnique(classNames, droplet);
	};

	// eslint-disable-next-line no-plusplus
	for (let i = 0, l = names.length; i < l; i++) {
		const drop = names[i];

		if (drop == null) continue;

		switch (typeof drop) {
			case "boolean": {
				// ESLint –ø–æ—á–µ–º—É-—Ç–æ —Å—Ö–æ–¥–∏—Ç —Å —É–º–∞ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ ü§¶‚Äç‚ôÇÔ∏è
				if ((prevDroplet as string | null) == null) continue;

				if (drop) addDroplet(null);

				prevDroplet = null;

				break;
			}

			case "object": {
				if (isArray<Prop, true>(drop)) {
					addDroplet(drop);

					continue;
				}

				for (const [name, toggled] of Object.entries(drop)) {
					if (toggled as boolean) addUnique(classNames, name as Prop);
				}

				prevDroplet = null;

				break;
			}

			default: {
				addDroplet(drop);

				break;
			}
		}
	}

	addDroplet(null);

	return classNames.join(" ");
}

/**
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–∞—Ä—Ç—É
 */
type ClassNamesMap<Keys extends Prop> = { [Key in Keys]: string };

/**
 * –°–æ–∑–¥–∞—ë—Ç —Å–æ–ø–æ—Å—Ç–æ–≤–ª—è—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ `c` –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
 *
 * @param map –ö–∞—Ä—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
 * @return
 * –°–æ–ø–æ—Å—Ç–æ–≤–ª—è—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ç–æ—á–Ω–æ –∫–∞–∫ `c`,
 * —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
 * –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –≤ –∫–∞—Ä—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –±—É–¥—É—Ç
 * –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞–º –∫–ª–∞—Å—Å—ã –∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ `c` –¥–ª—è
 * –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.
 * @example
 * ```ts
 * s(styles)("leftFloat", "clearfix");
 * // => "leftFloat_pideiddechjd clearfix_pideiddechji"
 * ```
 */
export function s<Keys extends Prop>(map: ClassNamesMap<Keys>) {
	return (...drops: DropArgs<Keys>) => {
		const reversed: Drop<Prop>[] = [];

		for (const drop of drops) {
			if (drop == null) continue;

			switch (typeof drop) {
				case "string": {
					reversed.push(map[drop]);

					break;
				}

				case "object": {
					if (isArray<Keys, true>(drop)) {
						reversed.push(drop.map((codename) => map[codename]));

						continue;
					}

					const remapped = Object.create(null);

					for (const [name, value] of Object.entries(drop)) {
						remapped[map[name as Keys]] = value;
					}

					reversed.push(remapped);

					break;
				}

				default: {
					reversed.push(drop);

					break;
				}
			}
		}

		return c(...reversed);
	};
}

type MappedStyles = Record<string, Properties | SimpleStyleRules>;

/**
 * –°–æ–∑–¥–∞—ë—Ç —Å—Ç–∏–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ–ª—å –¥–ª—è –Ω–∏—Ö
 *
 * @param styles –ö–∞—Ä—Ç–∞ —Å—Ç–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å
 * @param additions –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏, –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * –≤ –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ–ª–µ. –ü—Ä–∏ –∫–æ–ª–ª–∏–∑–∏–∏ –∏–º–µ–µ—Ç –º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —á–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏.
 * @return –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
 */
export function toStyleCombiner<
	Styles extends MappedStyles,
	Additions extends Record<string, string> | undefined,
>(styles: Styles, additions?: Additions) {
	type AllKeys =
		| keyof Styles
		| (Additions extends undefined ? never : keyof Additions);

	const combined: Record<AllKeys, string> = {
		...additions,
		...style(styles),
	};

	return s<AllKeys>(combined);
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
 *
 * @param keyName –ö–æ–¥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
 * @param styles –°–æ–∑–¥–∞–≤–∞–µ–º–∞—è –∫–∞—Ä—Ç–∞ —Å—Ç–∏–ª–µ–π
 * @return –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
 */
export function toClassName(
	keyName: string,
	styles: Properties | SimpleStyleRules,
) {
	const { classes } = createStyles({ [keyName]: styles });

	return classes[keyName];
}
